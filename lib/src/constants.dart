import 'package:retrofit_graphql/src/model/built_in_dirctive_definitions.dart';

const fileHeadComment = """
// GENERATED CODE - DO NOT MODIFY BY HAND. ANY MODIFICATION WILL BE LOST ON NEXT GENERATION
// Generated by Retrofit Graphql For Dart
// GitHub: https://github.com/Oualitsen/retrofit-Graphql-For-Dart/
// Pub.dev https://pub.dev/packages/retrofit_graphql
// ignore_for_file: camel_case_types, constant_identifier_names, unused_import, non_constant_identifier_names
""";

const graphqlHeadComment = """
# GENERATED CODE - DO NOT MODIFY BY HAND. ANY MODIFICATION WILL BE LOST ON NEXT GENERATION
# Generated by Retrofit Graphql For Dart
# GitHub: https://github.com/Oualitsen/retrofit-Graphql-For-Dart/
# Pub.dev https://pub.dev/packages/retrofit_graphql
""";

const clientTypes = {
  'GQPayload',
  'GQError',
  'GQErrorLocation',
  'GQSubscriptionPayload',
  'GQSubscriptionErrorMessage',
  'GQSubscriptionMessage'
};
const clientInterfaces = {'GQSubscriptionErrorMessageBase', 'GQWebSocketAdapter'};

const javaClientAdapterNoParamSync = '''
interface GQClientAdapter 
${gqDecorators}(${gqDecoratorsArgumentName}: ["@FunctionalInterface"], applyOnClient: true, applyOnServer: false)
${gqInterfaceFieldAsProperties} ${gqInternal} {
    execute(payload: String!): String!
}
''';

const javaClientAdapterWithParamSync = '''
interface GQClientAdapter 
${gqDecorators}(${gqDecoratorsArgumentName}: ["@FunctionalInterface"], applyOnClient: true, applyOnServer: false)
${gqInterfaceFieldAsProperties} ${gqInternal} {
    execute(payload: String!, operationName: String!): String!
}
''';

const javaJsonEncoderDecorder = '''
  scalar gqlJavaMap ${gqExternal}(gqClass: "Map<String, Object>", ${gqImport}: "${JavaImports.map}")
  scalar gqlJavaObject ${gqExternal}(gqClass: "Object")

  interface GQJsonEncoder
  ${gqDecorators}(${gqDecoratorsArgumentName}: ["@FunctionalInterface"], applyOnClient: true, applyOnServer: false)
   ${gqInterfaceFieldAsProperties} ${gqInternal} {
    encode(json: gqlJavaObject!): String!
  }

  interface GQJsonDecoder 
  ${gqDecorators}(${gqDecoratorsArgumentName}: ["@FunctionalInterface"], applyOnClient: true, applyOnServer: false)
   ${gqInterfaceFieldAsProperties} ${gqInternal} {
     decode(json: String!): gqlJavaMap!
  }

''';

const javaWebSocketAdapter = '''
scalar void ${gqExternal}(gqClass: "void")
scalar Consumer ${gqExternal}(gqClass: "Consumer<String>", gqImport: "java.util.function.Consumer")
scalar VoidConsumer ${gqExternal}(gqClass: "Consumer<Void>", gqImport: "java.util.function.Consumer")
scalar ThrowableConsumer ${gqExternal}(gqClass: "Consumer<Throwable>", gqImport: "java.util.function.Consumer")
scalar GQException ${gqExternal}(gqClass: "GQClient.GQException")

interface GQWebSocketAdapter ${gqInterfaceFieldAsProperties} ${gqInternal} {
   connect(onConnect: VoidConsumer!, onFailure: ThrowableConsumer): void!
   onMessage(message: Consumer!): void!
   sendMessage(message: String!): void!
   close(): void!
}
''';

String getClientObjects([String lang = 'Dart']) {
  String dynamicValue = "dynamic";
  if (lang == "Java") {
    dynamicValue = "Object";
  }
  return '''
scalar gqlMapStrObj ${gqExternal}(gqClass: "Map<String, ${dynamicValue}>")
scalar dynamicValue ${gqExternal}(gqClass: "${dynamicValue}")


type GQPayload ${gqInternal} {
  query: String!
  operationName: String!
  variables: gqlMapStrObj!
}

type GQError ${gqInternal} {
  message: String!
  path: [dynamicValue!]
  extensions: gqlMapStrObj
  locations: [GQErrorLocation!]
}

type GQErrorLocation ${gqInternal} {
  line: Int!
  column: Int!
}

type GQSubscriptionPayload ${gqInternal} {
  query: String
  operationName: String
  variables: gqlMapStrObj
  data: gqlMapStrObj
}


interface GQSubscriptionErrorMessageBase ${gqInternal} {
  type: String
  id: String
}

type GQSubscriptionErrorMessage implements GQSubscriptionErrorMessageBase ${gqInternal} {
  id: String
  type: String
  payload: [GQError!]
}

type GQSubscriptionMessage implements GQSubscriptionErrorMessageBase ${gqInternal} {
  id: String
  type: String
  payload: GQSubscriptionPayload
}

enum GQAckStatus {none progress acknoledged }

''';
}

class JavaImports {
  static const map = "java.util.Map";
  static const hashMap = "java.util.HashMap";
  static const optional = "java.util.Optional";
  static const mono = "reactor.core.publisher.Mono";
  static const flux = "reactor.core.publisher.Flux";
  static const stream = "java.util.stream.Stream";
  static const collectors = "java.util.stream.Collectors";
  static const objects = "java.util.Objects";
  static const list = "java.util.List";
  static const arrayList = "java.util.ArrayList";
  static const arrays = "java.util.Arrays";
  static const collections = "java.util.Collections";
  static const uuid = "java.util.UUID";
}

class SpringImports {
  static const controller = "org.springframework.stereotype.Controller";
  static const gqlArgument = "org.springframework.graphql.data.method.annotation.Argument";
  static const gqlDataFetchingEnvironment = "graphql.schema.DataFetchingEnvironment";
  static const gqlGraphQLException = "graphql.GraphQLException";
  static const repository = "org.springframework.stereotype.Repository";
  static const jpaRepository = "org.springframework.data.jpa.repository.JpaRepository";
  static const batchMapping = "org.springframework.graphql.data.method.annotation.BatchMapping";
  static const schemaMapping = "org.springframework.graphql.data.method.annotation.SchemaMapping";
  static const queryMapping = "org.springframework.graphql.data.method.annotation.QueryMapping";
  static const mutationMapping =
      "org.springframework.graphql.data.method.annotation.MutationMapping";
  static const subscriptionMapping =
      "org.springframework.graphql.data.method.annotation.SubscriptionMapping";
}
