const fileHeadComment = """
// GENERATED CODE - DO NOT MODIFY BY HAND. ANY MODIFICATION WILL BE LOST ON NEXT GENERATION
// Generated by Retrofit Graphql For Dart
// GitHub: https://github.com/Oualitsen/retrofit-Graphql-For-Dart/
// Pub.dev https://pub.dev/packages/retrofit_graphql
// ignore_for_file: camel_case_types, constant_identifier_names, unused_import, non_constant_identifier_names
""";

const graphqlHeadComment = """
# GENERATED CODE - DO NOT MODIFY BY HAND. ANY MODIFICATION WILL BE LOST ON NEXT GENERATION
# Generated by Retrofit Graphql For Dart
# GitHub: https://github.com/Oualitsen/retrofit-Graphql-For-Dart/
# Pub.dev https://pub.dev/packages/retrofit_graphql
""";

const clientTypes = {
  'GQPayload',
  'GQError',
  'GQErrorLocation',
  'GQSubscriptionPayload',
  'GQSubscriptionErrorMessage',
  'GQSubscriptionMessage'
};
const clientInterfaces = {'GQSubscriptionErrorMessageBase'};
const clientObjects = '''
scalar gqlMapStrObj @gqExternal(gqClass: "Map<String, dynamic>")
scalar dartDynamic @gqExternal(gqClass: "dynamic")

type GQPayload {
  query: String!
  operationName: String!
  variables: gqlMapStrObj!
}

type GQError {
  message: String!
  path: [dartDynamic!]
  extensions: gqlMapStrObj
  locations: [GQErrorLocation!]
}

type GQErrorLocation {
  line: Int!
  column: Int!
}



type GQSubscriptionPayload {
  query: String
  operationName: String
  variables: gqlMapStrObj
  data: gqlMapStrObj
}

enum GQAckStatus {none progress acknoledged }

interface GQSubscriptionErrorMessageBase {
  type: GQSubscriptionMessageType
  id: String
}

type GQSubscriptionErrorMessage implements GQSubscriptionErrorMessageBase {
  id: String
  type: GQSubscriptionMessageType
  payload: [GQError!]
}

type GQSubscriptionMessage implements GQSubscriptionErrorMessageBase {
  id: String
  type: GQSubscriptionMessageType
  payload: GQSubscriptionPayload
}

enum GQSubscriptionMessageType {
  connection_init connection_ack subscribe next complete error
}

''';

class JavaImports {
  static const map = "java.util.Map";
  static const hasMap = "java.util.HashMap";
  static const optional = "java.util.Optional";
  static const mono = "reactor.core.publisher.Mono";
  static const flux = "reactor.core.publisher.Flux";
  static const stream = "java.util.stream.Stream";
  static const collectors = "java.util.stream.Collectors";
  static const objects = "java.util.Objects";
}

class SpringImports {
  static const controller = "org.springframework.stereotype.Controller";
  static const gqlArgument = "org.springframework.graphql.data.method.annotation.Argument";
  static const gqlDataFetchingEnvironment = "graphql.schema.DataFetchingEnvironment";
  static const gqlGraphQLException = "graphql.GraphQLException";
  static const repository = "org.springframework.stereotype.Repository";
  static const jpaRepository = "org.springframework.data.jpa.repository.JpaRepository";
  static const batchMapping = "org.springframework.graphql.data.method.annotation.BatchMapping";
  static const schemaMapping = "org.springframework.graphql.data.method.annotation.SchemaMapping";
  static const queryMapping = "org.springframework.graphql.data.method.annotation.QueryMapping";
  static const mutationMapping = "org.springframework.graphql.data.method.annotation.MutationMapping";
  static const subscriptionMapping = "org.springframework.graphql.data.method.annotation.SubscriptionMapping";
}
